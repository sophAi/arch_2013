{
  "pages": [
    {
      "text": "Po-Jen Hsu / \u8a31\u4f2f\u4efb\nEmail:   clusterga@gmail.com\nTel:     +886-952-335534\n(\u672c\u7db2\u9801pdf\u7248\u672c\uff0c\u8acb\u9ede\u9078\u4e0b\u8f09)\n(English version)\n\n\u6559\u80b2\u8207\u7d93\u6b77\n\u535a\u58eb\u73ed, \u4e2d\u592e\u7814\u7a76\u9662\u539f\u5b50\u8207\u5206\u5b50\u79d1\u5b78\u7814\u7a76\u6240\u570b\u969b\u7814\u7a76\u751f(TIGP) (2008 - Now)\n\u4e2d\u592e\u5927\u5b78\u7269\u7406\u6240\u5c08\u4efb\u7814\u7a76\u52a9\u7406 (2005 - 2008)\n\u5175\u5f79\uff0c\u6d77\u5de1\u4e0b\u58eb (2003 - 2005)\n\u4e2d\u592e\u5927\u5b78\u7269\u7406\u6240\u78a9\u58eb (2000 - 2003)\n\u4e2d\u592e\u5927\u5b78\u7269\u7406\u7cfb\u5b78\u58eb (1996 - 2000)\n\u8f14\u4ec1\u5927\u5b78\u7269\u7406\u7cfb\u8f49\u5b78 (1995-1996)\n\n\n\u7a0b\u5f0f\u8a2d\u8a08\u5c08\u6848\n\u4ee5\u4e0b\u7a0b\u5f0f\u5747\u70ba\u655d\u4eba\u6240\u64b0\u5beb\uff0c\u4ee5GNU License (GPL)\u767c\u4f48\u3002(\u9ede\u9078\u6bcf\u500b\u5b50\u6a19\u984c\u53ef\u4ee5\u9023\u7d50\u5230\u7a0b\u5f0f\u7684GitHub\u5c08\u9801)\n\nCL-VAF\nVector Autocorrelation Function with GPGPU (OpenCL/C/C++)\n\nCL-VAF\u7684\u6548\u80fd\uff0c\u85cd\u7dda\u70baCPU\u6548\u80fd\u3002 (\u9ede\u5716\u53ef\u653e\u5927)\n\n\u4ee5GPGPU\u9032\u884c\u5411\u91cf\u51fd\u6578\u81ea\u76f8\u95dc(vector autocorrealtion)\u7684\u5e73\u884c\u5316\u52a0\u901f\u8a08\u7b97: (a) \u5c0d\u65bc\u4e00\u7cfb\u5217\u5411\u91cf\uff0c(c) \u5c07\u5e8f\u5217\u8cc7\u6599\u4f9d\u5e8f\u8b80\u9032odd\u6216even buffer; (b) \u5c07\u81ea\u76f8\u95dc\u51fd\u5f0f\u7684kernel\u7de8\u8b6f\u4e26\u4e0a\u50b3\u81f3GPU\u7684work item\uff0c\u4e26\u5c0dbuffer\u88e1\u7684\u5e8f\u5217\u8cc7\u6599\u9032\u884c\u8a08\u7b97\u3002(\u9ede\u5716\u53ef\u653e\u5927)\nCL-VAF [1, 4, 5, 7, 8] \u662f\u4e00\u500b\u4ee5C/C++/OpenCL\u64b0\u5beb\u7684\u8a08\u7b97\u7a0b\u5f0f\uff0c\u900f\u904eGPGPU\u7684\u5e73\u884c\u5316\u5c0d\u96a8\u6642\u9593\u8b8a\u5316\u7684\u5411\u91cf\u9032\u884c\u81ea\u76f8\u95dc\u51fd\u6578(autocorrelation function)\u7684\u8a08\u7b97\uff0c\u8a72\u7a0b\u5f0f\u7531MPICH\u7248\u672c\u7684TCOM\u4fee\u6539\u800c\u4f86\u3002\u8207Nvidia\u7684CUDA\u4e0d\u540c\u5728\u65bc\uff0cOpenCL\u5177\u6709\u66f4\u666e\u904d\u7684\u76f8\u5bb9\u6027\uff0c\u5176\u652f\u63f4Nvidia\u3001AMD\u3001Intel\u3001Apple\u751a\u81f3\u662fARM\u7cfb\u7d71\uff0c\u6b64\u7a0b\u5f0f\u7684\u6548\u80fd\u8a55\u4f30\u662f\u5728\u6d88\u8cbb\u7b49\u7d1a\u7684\u986f\u793a\u5361\u4e0a\u5b8c\u6210\u7684\uff0c\u5728\u66f4\u5148\u9032\u7684\u6a5f\u5668\u4e0a\uff0c\u4f8b\u5982Tesla\u61c9\u8a72\u66f4\u80fd\u767c\u63ee\u5176\u5e73\u884c\u5316\u7684\u512a\u52e2\u3002\n\n\nMPI-Tools\nMPICH Tools (Shell Script)\nMPI-Tools\u662f\u4e00\u500b\u4ee5Bash Shell Script\u64b0\u5beb\u7684\u7a0b\u5f0f\uff0c\u70baMPICH\u5feb\u901f\u4f48\u7f72\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u5728\u6975\u77ed\u6642\u9593\u5167\u5b8c\u6210MPICH\u53c3\u6578\u6a94\u3001\u4ee5\u53caCPU\u5206\u914d\u7684\u74b0\u5883\u5efa\u7acb\uff0c\u7531\u65bc\u4ee5Shell script\u64b0\u5beb\uff0c\u5e7e\u4e4e\u53ef\u4ee5\u5728\u4efb\u4f55Linux/Unix\u5e73\u53f0\u4e0a\u7acb\u5373\u57f7\u884c\u3002\n\n\nPTMD\nParallel Tempering Molecular Dynamics Simulation Plus Self Analyzers (MPICH/Fortran)\n\nPTMD\u7684\u8a2d\u8a08\u67b6\u69cb. (\u9ede\u5716\u53ef\u653e\u5927)\nPTMD [3-5]\u662f\u4e00\u500b\u4ee5MPICH/Fortran\u64b0\u5beb\u7684\u6578\u503c\u8a08\u7b97\u7a0b\u5f0f\uff0c\u5c6c\u65bc\u6bd4\u8f03\u5927\u578b\u7684\u8edf\u9ad4(\u8d85\u904e10000\u884c\u7a0b\u5f0f\u78bc)\uff0c\u7531\u655d\u4eba\u65bc\u535a\u58eb\u5b78\u7a0b\u5167\u7368\u7acb\u5b8c\u6210\uff0c\u9019\u500b\u7a0b\u5f0f\u904b\u7528\u4e86\u8a31\u591a\u8edf\u9ad4\u5de5\u7a0b\u7684\u6982\u5ff5\uff0c\u4e5f\u9996\u5ea6\u5f15\u7528\u7248\u672c\u63a7\u5236\u4f86\u9032\u884c\u7a0b\u5f0f\u7684\u64b0\u5beb\u8207\u7dad\u8b77\u3002PTMD\u9664\u4e86\u80fd\u5920\u5229\u7528\u5e73\u884c\u8a08\u7b97\u9032\u884c\u5206\u5b50\u52d5\u529b\u5b78\u6a21\u64ec\uff0c\u4ed6\u9084\u4ff1\u5099\u4e86\u81ea\u6211\u5206\u6790\u7d50\u679c\u7684\u80fd\u529b\uff0c\u9019\u662f\u56e0\u70ba\u6211\u5c07\u6578\u503c\u6a21\u64ec\u8207\u6578\u503c\u5206\u6790\u8996\u70ba\u540c\u7b49\u7684\u7a0b\u5f0f\u5340\u584a\uff0c\u6bcf\u500b\u5340\u584a\u5177\u6709\u6a19\u6e96\u5316\u7684\u8f38\u5165\uff0c\u8655\u7406\uff0c\u4ee5\u53ca\u8f38\u51fa\u67b6\u69cb\uff0c\u5340\u584a\u8f38\u51fa\u8207\u8f38\u5165\u7684\u8cc7\u6599\u683c\u5f0f\u53ef\u4ee5\u4e92\u901a\uff0c\u70ba\u4e86\u9054\u5230\u9019\u500b\u76ee\u7684\uff0c\u7531\u4e00\u500bParallel Shell\u4f86\u9032\u884c\u5340\u584a\u7684\u6392\u7a0b\u8207\u5e73\u884c\u5316\uff0c\u5c07\u5e73\u884c\u5316\u7684\u7a0b\u5f0f\u78bc\u7368\u7acb\u51fa\u4f86\uff0c\u9664\u4e86\u80fd\u5feb\u901f\u7684\u5c07\u4e00\u822c\u6578\u503c\u8a08\u7b97\u5e73\u884c\u5316\uff0c\u66f4\u80fd\u5920\u4f9d\u5e8f\u4ee5\u6a21\u64ec1\uff0c\u5206\u67901\uff0c\u6a21\u64ec2\uff0c\u5206\u67902...\u7b49\u6392\u7a0b\u4f86\u5c07\u5927\u91cf\u7684\u8a08\u7b97\u8207\u6a21\u64ec\u5de5\u4f5c\u4ee5\u4e0d\u9593\u65b7\u7684\u65b9\u5f0f\u9032\u884c\uff0c\u4f8b\u5982\u5728\u6211\u7684\u535a\u58eb\u8ad6\u6587\u88e1\uff0c\u6211\u5229\u7528\u9019\u500b\u7a0b\u5f0f\u5728\u534a\u5e74\u88e1\u4ee5\u4e0d\u9593\u65b7\u7684\u65b9\u5f0f\u9032\u884c10\u500b\u6750\u6599\u7684\u5206\u5b50\u52d5\u529b\u5b78\u6a21\u64ec\uff0c\u540c\u6642\u5c0d\u6a21\u64ec\u6240\u5f97\u7684\u6642\u9593\u5e8f\u5217\u8cc7\u6599(\u4f8b\u5982\u5206\u5b50\u8ecc\u8de1\u8207\u80fd\u91cf\u8b8a\u5316)\u81ea\u52d5\u9032\u884c\u4e94\u7a2e\u4ee5\u4e0a\u4e0d\u540c\u7684\u5206\u6790(\u8ecc\u8de1\u5206\u6790\uff0c\u81ea\u76f8\u95dc\u6642\u9593\u51fd\u6578\uff0c\u6bd4\u71b1\u8207\u7d71\u8a08\u529b\u5b78\u53c3\u6578\u8a08\u7b97)\uff0c\u7531\u65bcParallel Shell\u57f7\u884c\u4e0a\u6975\u5177\u5f48\u6027\uff0c\u53ea\u8981\u628a\u6392\u7a0b\u8173\u672c\u7de8\u5beb\u5b8c\u5c31\u80fd\u8b93PTMD\u4e00\u5207\u81ea\u52d5\u5316\u53bb\u5b8c\u6210\u3002\u5728\u591a\u5e74\u7684\u5e73\u884c\u5316\u7a0b\u5f0f\u8a2d\u8a08\u6240\u7d2f\u7a4d\u7684\u7d93\u9a57\u88e1\uff0c\u8b93\u6211\u9818\u609f\u5230\u9664\u4e86\u5e73\u884c\u8207\u6700\u4f73\u5316\u7a0b\u5f0f\u78bc\u4e4b\u5916\uff0c\u5584\u52a0\u5229\u7528\u7a0b\u5f0f\u57f7\u884c\u5b8c\u5230\u4e0b\u4e00\u500b\u5de5\u4f5c\u958b\u59cb\u57f7\u884c\u4e4b\u9593CPU\u9592\u7f6e\u7684\u7a7a\u6a94\u4e5f\u662f\u5f88\u91cd\u8981\u7684\uff0c\u5229\u7528Parallel Shell\u7e2e\u77ed\u9592\u7f6e\u6642\u9593\u80fd\u5920\u7bc0\u7701\u5927\u91cf\u7684\u4eba\u529b\u8207\u6642\u9593\uff0c\u4e5f\u80fd\u5920\u66f4\u65b9\u4fbf\u7684\u64f4\u5145\u6578\u503c\u8a08\u7b97\u529f\u80fd\u3002\n\n\nPTMBHGA\nParallel Tempering Multicanonical Basin-hopping Plus Genetic Algorithm (MPICH/Fortran)\n\nPTMBHGA\u7684\u8a2d\u8a08\u67b6\u69cb. (\u9ede\u5716\u53ef\u653e\u5927)\nPTMBHGA [3-5,9-11] \u662f\u53e6\u5916\u4e00\u500b\u4ee5MPICH/Fortran\u64b0\u5beb\u7684\u5927\u578b\u6700\u4f73\u5316\u8edf\u9ad4\uff0c\u662f\u6211\u7684\u78a9\u58eb\u5c08\u984c\uff0c\u9019\u500b\u7a0b\u5f0f\u7d50\u5408\u4e86\u57fa\u56e0\u6f14\u7b97\u6cd5\uff0c\u5e73\u884c\u6eab\u5ea6\u8499\u5730\u5361\u7f85\u6cd5(Parallel Tempering Monte Carlo)\uff0c\u6a21\u64ec\u71b1\u9000\u706b(Simulated Annealing)\uff0cMulticanonical\u8499\u5730\u5361\u908f\u6cd5\uff0c\u9084\u6709\u8457\u540d\u7684Basin Hopping\u6cd5\uff0c\u5e7e\u4e4e\u7db2\u7f85\u6587\u737b\u4e2d\u8457\u540d\u7684\u6700\u4f73\u5316\u6f14\u7b97\u6cd5\uff0c\u5176\u5c40\u90e8\u6700\u4f73\u5316\u904b\u7b97\u5b50\u5305\u542bSimplex, Conjugate Gradient\u8ddfLBFG-S\u6f14\u7b97\u6cd5\uff0c\u540c\u6642\u5177\u6709\u5e73\u884c\u8a08\u7b97\u7684\u80fd\u529b\u3002\u5728\u9032\u884c\u57fa\u56e0\u6f14\u7b97\u6cd5\u7a0b\u5f0f\u78bc\u7684\u64b0\u5beb\u904e\u7a0b\u4e2d\uff0c\u6211\u9818\u609f\u5230\u53ef\u4ee5\u5c07\u57fa\u56e0\u6f14\u7b97\u6cd5\u7684\u5b50\u6bcd\u4e16\u4ee3(generation)\u8996\u70ba\u8499\u5730\u5361\u7f85\u6cd5\u7684\u53d6\u6a23\u6b65\u6578(sampling step)\uff0c\u800c\u57fa\u56e0\u904b\u7b97\u5b50(Genetic Operator)\u53ef\u4ee5\u8996\u70ba\u8207\u8499\u5730\u5361\u7f85\u88e1\u7684Random Move\u540c\u7b49\u7684\u89d2\u8272\uff0c\u56e0\u6b64\u6211\u5728\u57fa\u56e0\u6f14\u7b97\u6cd5\u88e1\u52a0\u5165\u8499\u5730\u5361\u7f85\u7684\u6a5f\u7387\u6aa2\u6e2c(Transition Probability)\uff0c\u540c\u6642\u5b50\u4ee3\u5e73\u884c\u5316\uff0c\u6bcf\u500b\u5b50\u4ee3\u53ef\u4ee5\u7368\u7acb\u57f7\u884c\u4e0d\u540c\u6eab\u5ea6\u53c3\u6578\u7684\u8499\u5730\u5361\u7f85\u6cd5\uff0c\u6210\u529f\u7684\u5c07\u5169\u8005\u7d50\u5408\uff0c\u4e4b\u5f8c\u4e0d\u65b7\u52a0\u5f37\u7a0b\u5f0f\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u6a5f\u7387\u6aa2\u6e2c\u64f4\u5145\u6210\u4e5f\u53ef\u4ee5\u9032\u884cjump walking\u8a08\u7b97(Multicanonical Monte Carlo)\uff0c\u9084\u6709\u65b0\u589e\u66f4\u591a\u57fa\u56e0\u904b\u7b97\u5b50\uff0c\u6eab\u5ea6\u53ef\u4ee5\u5b9a\u6eab\u4e5f\u53ef\u4ee5\u9032\u884c\u71b1\u9000\u706b\u6a21\u64ec\uff0cPTMBHGA\u5f8c\u4f86\u8b8a\u6210\u5be6\u9a57\u5ba4\u88e1\u6700\u91cd\u8981\u7684\u8a08\u7b97\u7a0b\u5f0f\uff0c\u56e0\u70ba\u4ed6\u80fd\u5feb\u901f\u9032\u884c\u9ad8\u7cbe\u78ba\u5ea6\u7684\u6700\u4f73\u5316\u8a08\u7b97\uff0c\u9084\u53ef\u4ee5\u5206\u5225\u904b\u884c\u57fa\u56e0\u6f14\u7b97\uff0c\u8499\u5730\u5361\u7f85\u7b49\u6f14\u7b97\u6cd5\uff0c\u53ea\u8981\u900f\u904e\u9069\u7576\u7684\u53c3\u6578\u8abf\u6574\u5373\u53ef\u9054\u5230\uff0c\u61c9\u7528\u6027\u975e\u5e38\u5ee3\u6cdb\uff0c\u9664\u4e86\u5206\u5b50\u53e2\u96c6(Cluster)\u6700\u4f73\u5316\uff0c\u8fd1\u5e74\u4f86\u9084\u61c9\u7528\u5728\u7d71\u8a08\u7684\u6700\u5927\u71b5\u5b9a\u7406\u8a08\u7b97(Maximal Entropy)\uff0c\u9084\u6709\u77f3\u58a8\u70ef(Graphene)\u7684\u7d50\u69cb\u5206\u6790\u3002\u900f\u904e\u64b0\u5beb\u9019\u500b\u7a0b\u5f0f\uff0c\u8b93\u6211\u5c0d\u6700\u4f73\u5316\u65b9\u6cd5\u6709\u5f88\u6df1\u5165\u7684\u4e86\u89e3\u3002\n\n\nD-Tools\nTools for Diffusion Theory (C/C++)\nD-Tools [1]  \u662f\u4e00\u500b\u4ee5C/C++\u64b0\u5beb\u7684\u7a0b\u5f0f\uff0c\u7a0b\u5f0f\u78bc\u7d04\u70ba1000\u591a\u884c\uff0c\u662f\u4e00\u500b\u7528\u4f86\u8f14\u52a9Diffusion Theory\u7406\u8ad6\u8a08\u7b97\u7684\u5de5\u5177\u7a0b\u5f0f\uff0c\u9019\u662f\u6211\u7684\u535a\u58eb\u8ad6\u6587\u4e2d\uff0c\u8207\u7fa9\u5927\u5229ISMAC\u7814\u7a76\u55ae\u4f4d(\u76f8\u7576\u65bc\u53f0\u7063\u7684\u4e2d\u7814\u9662) Arnaldo Rapallo \u535a\u58eb\u4e00\u8d77\u9032\u884c\u7684\u984c\u76ee\uff0c\u5728\u5b8c\u6210PTMD\u5f8c\uff0c\u6211\u5c07\u7a0b\u5f0f\u8a2d\u8a08\u7684\u91cd\u5fc3\u5b8c\u5168\u8f49\u79fb\u81f3C/C++\u8207Python\uff0c\u9019\u662f\u7576\u6642\u4ee5C/C++\u8a9e\u8a00\u5b8c\u6210\u7684\u4f5c\u54c1\u4e4b\u4e00\u3002\n\n\nTCOM\nVector Autocorrelation Function with MPICH (MPICH/Fortran)\nTCOM [1, 4, 5, 7, 8] \u662fMPICH\u7248\u672c\u7684\u5411\u91cf\u81ea\u76f8\u95dc\u51fd\u5f0f\u8a08\u7b97\u7a0b\u5f0f\uff0c\u5b8c\u6210\u5f8c\u4e0d\u4e45\uff0c\u6211\u4ee5\u8a72\u7a0b\u5f0f\u70ba\u96db\u578b\u6539\u5beb\u6210GPGPU\u7684\u7248\u672c (CL-VAF)\u3002\n\n\n\n\u7814\u7a76\u4f01\u5283\n\nSystem Message: ERROR/3 (<string>, line 123)\nDocument or section may not begin with a transition.\n\n\n\u5176\u4ed6\u8cc7\u8a0a\n\u5728\u4e2d\u592e\u5927\u5b78\u8907\u96dc\u6db2\u9ad4\u5be6\u9a57\u5ba4\u88e1\uff0c\u6211\u5f9e\u63a1\u8cfc\u786c\u9ad4\u8207\u7d44\u88dd\u914d\u4ef6\u958b\u59cb\uff0c\u5230\u7cfb\u7d71\u7684\u5b89\u88dd\u8207\u6e2c\u8a66\uff0c\u5e7e\u4e4e\u662f\u5f9e0\u958b\u59cb\u6253\u9020\u4e86\u5be6\u9a57\u5ba4\u7684PC Cluster\u6a5f\u623f\u74b0\u5883\uff0c\u540c\u6642\u4e5f\u67b6\u8a2d\u4e86\u5404\u5f0f\u4f3a\u670d\u5668\uff0c\u5305\u542b\u90f5\u4ef6\uff0c\u7db2\u9801(\u5be6\u9a57\u5ba4\u7db2\u9801\u5efa\u7acb)\uff0c\u4ee5\u53ca\u7248\u672c\u63a7\u5236(SVN/Git)\u4f3a\u670d\u5668\u3002\nBest Team Presentation Award, 4th Hope Meeting, 2012, Japan.\n2009\u5e74 ICOS2009\u7269\u7406\u985e\u4e3b\u8981\u6f14\u8b1b\u8005. (slides)\n\u6559\u80b2\u90e8EzGo\u5c08\u6848\u7684PhET\u7dda\u4e0a\u6559\u80b2\u63a8\u5ee3\uff0c\u7269\u7406\u5be6\u9a57\u8edf\u9ad4\u7684\u4e2d\u6587\u7ffb\u8b6f\u8005\uff0c\u7ffb\u8b6f\u4f5c\u54c1\u5982\u4e0b:Davission-Germer Experiment\nStern-Gerlach Experiment\nQuantum Wave Interference\nQuantum Tunneling\nQuantum Bound States\nCovalent Bonds\nBand Structure\n\n\u61c9\u7528\u7d71\u8a08(Python) [3]\uff0c\u6642\u9593\u5e8f\u5217\u5206\u6790(Time series analysis) [2]\uff0c\u6578\u503c\u6a21\u64ec(Matlab/Octave)\u8ab2\u7a0b\u6559\u5b78\u3002\nPC Cluster/GPGPU \u8a08\u7b97\u74b0\u5883\u7684\u5efa\u7acb\u8207\u7cfb\u7d71\u8a2d\u5b9a\uff0cLinux\u4f3a\u670d\u5668\u67b6\u8a2d\uff0c\u5e73\u884c\u8a08\u7b97\u7a0b\u5f0f(MPICH/OpenCL)\u8ab2\u7a0b\u6559\u5b78\u3002\n\u7d71\u8a08\u7269\u7406\uff0c\u91cf\u5b50\u7269\u7406\uff0c\u61c9\u7528\u6578\u5b78\uff0c\u8a08\u7b97\u6a5f\u6982\u8ad6\uff0c\u6578\u503c\u6a21\u64ec\uff0c\u6f14\u7b97\u6cd5\u8ab2\u7a0b\u6559\u5b78\u3002\n\u81ea\u7531\u8edf\u9ad4\u63a8\u5ee3\uff0c\u79d1\u5b78\u8a08\u7b97\u8edf\u9ad4\u5c08\u6848\u5efa\u7acb\uff0c\u5927\u578b\u8edf\u9ad4\u7a0b\u5f0f\u8a2d\u8a08\uff0cLatex\u8ab2\u7a0b\u6559\u5b78\u3002\n\n\n\u767c\u8868\u6587\u737b\n(\u9ede\u9078\u984c\u76ee\u53ef\u4e0b\u8f09\u767c\u8868\u671f\u520a\u6587\u7ae0)\n1. Peptide dynamics by molecular dynamics and diffusion theory methods with improved basis sets,\nP. J. Hsu, S. K. Lai, and A. Rapallo, J. Chem. Phys. (submitted).\n2. Weak correlation effect on the folding of transthyretin fragment studied by the shape similarity technique and time series methods,\nP. J. Hsu, S. A. Cheong, and S. K. Lai, Europhys Lett. (accepted).\n3. A new perspective of shape recognition to discover the phase transition of finite-size clusters,\nP. J. Hsu, J. Comput. Chem. (accepted).\n4. Melting behavior of Ag14 cluster: An order parameter by instantaneous normal modes,\nP. H. Tang, T. M. Wu, P. J. Hsu, and S. K. Lai, J. Chem. Phys. 137, 244304 (2012).\n5. Comparative study of cluster\u00a0Ag17Cu2\u00a0by instantaneous normal mode analysis and by isothermal Brownian-type molecular dynamics simulation,\nP. H. Tang, T. M. Wu, T. W. Yen, S. K. Lai, and P. J. Hsu, J. Chem. Phys. 135, 094302 (2011).\n6. Dynamical study of metallic clusters using the statistical method of time series clustering,\nS. K. Lai, Y. T. Lin, P. J. Hsu, and S. A. Cheong, Compt. Phys. Commun. 182,\u00a01013\u00a0(2011).\n7. Melting behavior of noble-metal-based bimetallic clusters,\nT. W. Yen, P. J. Hsu, and S. K. Lai, e-J. Surf. Sci. Nanotech.\u00a07, 149-156 (2009).\n8. Melting scenario in metallic clusters,\nP. J. Hsu, J. S. Luo, S. K. Lai, J. F. Wax, and J-L Bretonnet, J. Chem. Phys.\u00a0129, 194302 (2008).\n9. Structure of bimetallic clusters,\nP. J. Hsu and S. K. Lai, J. Chem. Phys.\u00a0124, 044711 (2006).\n10. Multi-canonical basin-hopping: a new global optimization method for complex systems,\nL. Zhan, B. Piwowar, W. K. Liu, P. J. Hsu, S. K. Lai, and Jeff Z. Y. Chen, J. Chem. Phys.\u00a0120, 5536 (2004).\n11. Structures of metallic clusters: mono- and polyvalent metals,\nS. K. Lai, P. J. Hsu, K. L. Wu, W. K. Liu, and M. Iwamatsu, J. Chem. Phys.\u00a0117, 10715 (2002).", 
      "tags": "", 
      "loc": "/stories/cv_zh.html", 
      "title": "Curriculum Vitae (\u8a31\u4f2f\u4efb)"
    }, 
    {
      "text": "Name: Po-Jen Hsu / \u8a31\u4f2f\u4efb\nEmail:   clusterga@gmail.com\nTel:     +886-952-335534\n(Chinese version)\nPh.D, IAMS, TIGP, Academia Sinica (2008 - Now)\nResearch Assistant in Physics, National Central University (2005 - 2008)\nMilitary Service (2003 - 2005)\nM.S. in Physics, National Central University (2000 - 2003)\nB.S. in Physics, National Central University (1996 - 2000)\n\nPROJECTS\nThe following softwares were developed by me and can be modified and distributed under GNU License (GPL). (Click on each subtitle to the corresponding GitHub repository)\n\nCL-VAF\nVector Autocorrelation Function with GPGPU (OpenCL/C/C++)\n\nPerformance of CL-VAF.\n\nThree steps of the vector autocorrelation calculation using GPGPU. For a time series of vectors (a), load data to odd or even buffer sequentially (c). Then, assign the vector autocorrelation function to each work item in GPU (b).\nThe CL-VAF [1, 4, 5, 7, 8] uses the power of GPGPU to calculate the autocorrelation function of multi-dimensional vectors. The code was modified from my another project TCOM with carefully designed GPGPU parallelism. Instead of using CUDA, I chose OpenCL because of the cross-platform compatibility. OpenCL is supported by vast manufactures including Nvidia, AMD, Intel, ARM (Mobile devices), Apple, and so on whereas CUDA is only applicable on an Nvidia device. The benchmark is based on the consumer-level GPU. For more advanced models such as Nvidia Tesla, the performance should be further improved.\n\n\nMPI-Tools\nMPICH Tools (Shell Script)\nThe MPI-Tools has vast functionalities which allow users to construct and deploy the parallel computing in a minute. It's written in shell script to achieve the highest cross-platform transferability.\n\n\nPTMD\nParallel Tempering Molecular Dynamics Simulation Plus Self Analyzers (MPICH/Fortran)\n\nFramework of PTMD.\nThe PTMD [3-5] is an implementation of the software engineering. It is designed for big data analysis in bioinformatic system and is possible to  run numerical simulations and analyze their results in an iterative way. The parallel computing shell allows most kinds of computation to be set and ran in parallel easily. Up to now, most analyzers were designed for time series clustering, time series statistics, and moment analysis.\n\n\nPTMBHGA\nParallel Tempering Multicanonical Basin-hopping Plus Genetic Algorithm (MPICH/Fortran)\n\nFramework of PTMBHGA.\nThe PTMBHGA [3-5,9-11] is a combination of several state-of-art optimization techniques, including genetic algorithm, parallel tempering Monte Carlo, simulated annealing, basing-hopping, and multicanonical Monte Carlo. The program was designed to be flexible for either a single run  or integration of any optimization technique. I gained most knowledge of optimization from this project.\n\n\nD-Tools\nTools for Diffusion Theory (C/C++)\nThe D-tools [1] helps reducing the tedious preparation of the diffusion theory calculation. This is one topic of my Ph.D thesis collaborated with Dr. Arnaldo Rapallo.\n\n\nTCOM\nVector Autocorrelation Function with MPICH (MPICH/Fortran)\nThe TCOM [1, 4, 5, 7, 8] is an MPICH version of vector autocorrelation calculation. Later, I wrote CL-VAF with GPGPU implemented.\n\n\n\nOTHER INFORMATION\nConstructor and maintainer of PC clusters (Linux/Unix) and mail/version control (SVN/Git) system in Prof. San-Kiong Lai's Lab.\nBest Team Presentation Award, 4th Hope Meeting, 2012, Japan.\nMain speaker of open sources in physics in ICOS2009. (slides)\nChinese translations of PhET education project in physics.Davission-Germer Experiment\nStern-Gerlach Experiment\nQuantum Wave Interference\nQuantum Tunneling\nQuantum Bound States\nCovalent Bonds\nBand Structure\n\nApplied statistics [3] and numerical simulation teaching.\nTime series analysis [2], parallel computing, GPGPU computing, and computation algorithm.\n\n\nREFERENCES\n(Click on the title to download the paper)\n1. Peptide dynamics by molecular dynamics and diffusion theory methods with improved basis sets,\nP. J. Hsu, S. K. Lai, and A. Rapallo, J. Chem. Phys. (submitted).\n2. Weak correlation effect on the folding of transthyretin fragment studied by the shape similarity technique and time series methods,\nP. J. Hsu, S. A. Cheong, and S. K. Lai, Europhys Lett. (accepted).\n3. A new perspective of shape recognition to discover the phase transition of finite-size clusters,\nP. J. Hsu, J. Comput. Chem. (accepted).\n4. Melting behavior of Ag14 cluster: An order parameter by instantaneous normal modes,\nP. H. Tang, T. M. Wu, P. J. Hsu, and S. K. Lai, J. Chem. Phys. 137, 244304 (2012).\n5. Comparative study of cluster\u00a0Ag17Cu2\u00a0by instantaneous normal mode analysis and by isothermal Brownian-type molecular dynamics simulation,\nP. H. Tang, T. M. Wu, T. W. Yen, S. K. Lai, and P. J. Hsu, J. Chem. Phys. 135, 094302 (2011).\n6. Dynamical study of metallic clusters using the statistical method of time series clustering,\nS. K. Lai, Y. T. Lin, P. J. Hsu, and S. A. Cheong, Compt. Phys. Commun. 182,\u00a01013\u00a0(2011).\n7. Melting behavior of noble-metal-based bimetallic clusters,\nT. W. Yen, P. J. Hsu, and S. K. Lai, e-J. Surf. Sci. Nanotech.\u00a07, 149-156 (2009).\n8. Melting scenario in metallic clusters,\nP. J. Hsu, J. S. Luo, S. K. Lai, J. F. Wax, and J-L Bretonnet, J. Chem. Phys.\u00a0129, 194302 (2008).\n9. Structure of bimetallic clusters,\nP. J. Hsu and S. K. Lai, J. Chem. Phys.\u00a0124, 044711 (2006).\n10. Multi-canonical basin-hopping: a new global optimization method for complex systems,\nL. Zhan, B. Piwowar, W. K. Liu, P. J. Hsu, S. K. Lai, and Jeff Z. Y. Chen, J. Chem. Phys.\u00a0120, 5536 (2004).\n11. Structures of metallic clusters: mono- and polyvalent metals,\nS. K. Lai, P. J. Hsu, K. L. Wu, W. K. Liu, and M. Iwamatsu, J. Chem. Phys.\u00a0117, 10715 (2002).", 
      "tags": "", 
      "loc": "/stories/cv_pdf.html", 
      "title": "Curriculum Vitae (\u8a31\u4f2f\u4efb)"
    }, 
    {
      "text": "Name: Po-Jen Hsu / \u8a31\u4f2f\u4efb\nEmail:   clusterga@gmail.com\nTel:     +886-952-335534\n(Click on me to download the pdf version)\n(Chinese version)\nPh.D, IAMS, TIGP, Academia Sinica (2008 - Now)\nResearch Assistant in Physics, National Central University (2005 - 2008)\nMilitary Service (2003 - 2005)\nM.S. in Physics, National Central University (2000 - 2003)\nB.S. in Physics, National Central University (1996 - 2000)\n\nPROJECTS\nThe following softwares were developed by me and can be modified and distributed under GNU License (GPL). (Click on each subtitle to the corresponding GitHub repository)\n\nCL-VAF\nVector Autocorrelation Function with GPGPU (OpenCL/C/C++)\n\nPerformance of CL-VAF. (click on image to enlarge)\n\nThree steps of the vector autocorrelation calculation using GPGPU. For a time series of vectors (a), load data to odd or even buffer sequentially (c). Then, assign the vector autocorrelation function to each work item in GPU (b). (click on image to enlarge)\nThe CL-VAF [1, 4, 5, 7, 8] uses the power of GPGPU to calculate the autocorrelation function of multi-dimensional vectors. The code was modified from my another project TCOM with carefully designed GPGPU parallelism. Instead of using CUDA, I chose OpenCL because of the cross-platform compatibility. OpenCL is supported by vast manufactures including Nvidia, AMD, Intel, ARM (Mobile devices), Apple, and so on whereas CUDA is only applicable on an Nvidia device. The benchmark is based on the consumer-level GPU. For more advanced models such as Nvidia Tesla, the performance should be further improved.\n\n\nMPI-Tools\nMPICH Tools (Shell Script)\nThe MPI-Tools has vast functionalities which allow users to construct and deploy the parallel computing in a minute. It's written in shell script to achieve the highest cross-platform transferability.\n\n\nPTMD\nParallel Tempering Molecular Dynamics Simulation Plus Self Analyzers (MPICH/Fortran)\n\nFramework of PTMD. (click on image to enlarge)\nThe PTMD [3-5] is an implementation of the software engineering. It is designed for big data analysis in bioinformatic system and is possible to  run numerical simulations and analyze their results in an iterative way. The parallel computing shell allows most kinds of computation to be set and ran in parallel easily. Up to now, most analyzers were designed for time series clustering, time series statistics, and moment analysis.\n\n\nPTMBHGA\nParallel Tempering Multicanonical Basin-hopping Plus Genetic Algorithm (MPICH/Fortran)\n\nFramework of PTMBHGA. (click on image to enlarge)\nThe PTMBHGA [3-5,9-11] is a combination of several state-of-art optimization techniques, including genetic algorithm, parallel tempering Monte Carlo, simulated annealing, basing-hopping, and multicanonical Monte Carlo. The program was designed to be flexible for either a single run  or integration of any optimization technique. I gained most knowledge of optimization from this project.\n\n\nD-Tools\nTools for Diffusion Theory (C/C++)\nThe D-tools [1] helps reducing the tedious preparation of the diffusion theory calculation. This is one topic of my Ph.D thesis collaborated with Dr. Arnaldo Rapallo.\n\n\nTCOM\nVector Autocorrelation Function with MPICH (MPICH/Fortran)\nThe TCOM [1, 4, 5, 7, 8] is an MPICH version of vector autocorrelation calculation. Later, I wrote CL-VAF with GPGPU implemented.\n\n\n\nOTHER INFORMATION\nConstructor and maintainer of PC clusters (Linux/Unix) and mail/version control (SVN/Git) system in Prof. San-Kiong Lai's Lab.\nBest Team Presentation Award, 4th Hope Meeting, 2012, Japan.\nMain speaker of open sources in physics in ICOS2009. (slides)\nChinese translations of PhET education project in physics.Davission-Germer Experiment\nStern-Gerlach Experiment\nQuantum Wave Interference\nQuantum Tunneling\nQuantum Bound States\nCovalent Bonds\nBand Structure\n\nApplied statistics [3] and numerical simulation teaching.\nTime series analysis [2], parallel computing, GPGPU computing, and computation algorithm.\n\n\nREFERENCES\n(Click on the title to download the paper)\n1. Peptide dynamics by molecular dynamics and diffusion theory methods with improved basis sets,\nP. J. Hsu, S. K. Lai, and A. Rapallo, J. Chem. Phys. (submitted).\n2. Weak correlation effect on the folding of transthyretin fragment studied by the shape similarity technique and time series methods,\nP. J. Hsu, S. A. Cheong, and S. K. Lai, Europhys Lett. (accepted).\n3. A new perspective of shape recognition to discover the phase transition of finite-size clusters,\nP. J. Hsu, J. Comput. Chem. (accepted).\n4. Melting behavior of Ag14 cluster: An order parameter by instantaneous normal modes,\nP. H. Tang, T. M. Wu, P. J. Hsu, and S. K. Lai, J. Chem. Phys. 137, 244304 (2012).\n5. Comparative study of cluster\u00a0Ag17Cu2\u00a0by instantaneous normal mode analysis and by isothermal Brownian-type molecular dynamics simulation,\nP. H. Tang, T. M. Wu, T. W. Yen, S. K. Lai, and P. J. Hsu, J. Chem. Phys. 135, 094302 (2011).\n6. Dynamical study of metallic clusters using the statistical method of time series clustering,\nS. K. Lai, Y. T. Lin, P. J. Hsu, and S. A. Cheong, Compt. Phys. Commun. 182,\u00a01013\u00a0(2011).\n7. Melting behavior of noble-metal-based bimetallic clusters,\nT. W. Yen, P. J. Hsu, and S. K. Lai, e-J. Surf. Sci. Nanotech.\u00a07, 149-156 (2009).\n8. Melting scenario in metallic clusters,\nP. J. Hsu, J. S. Luo, S. K. Lai, J. F. Wax, and J-L Bretonnet, J. Chem. Phys.\u00a0129, 194302 (2008).\n9. Structure of bimetallic clusters,\nP. J. Hsu and S. K. Lai, J. Chem. Phys.\u00a0124, 044711 (2006).\n10. Multi-canonical basin-hopping: a new global optimization method for complex systems,\nL. Zhan, B. Piwowar, W. K. Liu, P. J. Hsu, S. K. Lai, and Jeff Z. Y. Chen, J. Chem. Phys.\u00a0120, 5536 (2004).\n11. Structures of metallic clusters: mono- and polyvalent metals,\nS. K. Lai, P. J. Hsu, K. L. Wu, W. K. Liu, and M. Iwamatsu, J. Chem. Phys.\u00a0117, 10715 (2002).", 
      "tags": "", 
      "loc": "/stories/cv.html", 
      "title": "Curriculum Vitae (\u8a31\u4f2f\u4efb)"
    }, 
    {
      "text": "\u66ab\u5b58\u5340\u3002", 
      "tags": "", 
      "loc": "/posts/arch_2013.html", 
      "title": "arch 2013\u9996\u9801"
    }
  ]
}